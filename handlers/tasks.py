import dateparser
import asyncio

from sqlite3 import connect
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from data.data_store import tasks_list, reminder_tasks
from timer.reminder_job import send_reminder
from keyboards.userkb import build_task_keyboard, build_reminder_keyboard, build_time_keyboard

from data.bot import bot  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç bot –∏–∑ bot.py

user = Router()


class Task(StatesGroup):
    task = State()
    time = State()
    new_time = State()


@user.message(CommandStart())
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ üìù\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚ûï /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "üìã /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n"
        "‚úÖ /done ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
        "‚ùå /delete ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n\n"
        "–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /add, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!\n\n"
        "üïí –í–Ω–∏–º–∞–Ω–∏–µ: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É UTC+0 (–ò—Ä–ª–∞–Ω–¥–∏—è –∑–∏–º–æ–π, –õ–æ–Ω–¥–æ–Ω –∑–∏–º–æ–π).\n"
        "–ï—Å–ª–∏ –≤—ã –≤ –¥—Ä—É–≥–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ ‚Äî —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç–æ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á."
    )


@user.message(Command("add"))
async def add(message: Message, state: FSMContext):
    await state.set_state(Task.task)
    await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª.")


@user.message(Task.task)
async def task(message: Message, state: FSMContext):
    task_text = message.text
    user_id = message.from_user.id

    if user_id not in tasks_list:
        tasks_list[user_id] = []

    await state.update_data(task=task_text)
    await state.set_state(Task.time)
    await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.")


@user.message(Task.time)
async def task(message: Message, state: FSMContext):
    time_text = message.text
    user_id = message.from_user.id

    dt = dateparser.parse(time_text, languages=['ru'])
    if not dt:
        await message.answer("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 14:30¬ª –∏–ª–∏ ¬´15/06/2025 21:30¬ª.")
        return

    try:
        user_friendly = dt.strftime("%d.%m.%Y %H:%M")
    except AttributeError:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É\nüìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.")
        return

    await state.update_data(time=user_friendly)

    data = await state.get_data()
    new_task = {"task": data["task"],
                "time": data["time"],
                "is_remind": False,
                "timeout": False}
    tasks_list[user_id].append(new_task)

    await message.answer(f"üìù –í–∞—à–∞ –∑–∞–¥–∞—á–∞ <b>{data['task']}</b> –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª.", parse_mode="HTML")
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é /remind.")
    await state.clear()


@user.message(Command("change_time"))
async def change_time(message: Message):
    user_id = message.from_user.id

    if user_id not in tasks_list or not tasks_list[user_id]:
        await message.answer("üóíÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é /add.")
        return
    keyboard = build_time_keyboard(user_id)
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)


@user.callback_query(F.data.startswith("change_"))
async def select_task_to_change(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    task_index = int(callback.data.split("_")[-1])
    await state.update_data(change_index=task_index)
    await state.set_state(Task.new_time)
    await callback.message.answer("üïí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏:")


@user.message(Task.new_time)
async def set_new_time(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    task_index = data.get("change_index")

    dt = dateparser.parse(message.text, languages=['ru'])
    if not dt:
        await message.answer("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 14:30¬ª –∏–ª–∏ ¬´15/06/2025 21:30¬ª.")
        return

    formatted_time = dt.strftime("%d.%m.%Y %H:%M")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏
    tasks_list[user_id][task_index - 1]["time"] = formatted_time
    tasks_list[user_id][task_index - 1]["is_remind"] = False  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

    await message.answer("‚úÖ –í—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é /remind.")
    await state.clear()


@user.message(Command("list"))
async def list_tasks(message: Message):
    user_id = message.from_user.id

    if user_id not in tasks_list or not tasks_list[user_id]:
        await message.answer("üóíÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é /add.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    user_tasks = tasks_list[user_id]
    print(user_tasks)

    task_lines = []
    for i, task_dict in enumerate(user_tasks):
        data = user_tasks[0]
        # task_dict ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –æ–¥–Ω–æ–π –ø–∞—Ä–æ–π {—Ç–µ–∫—Å—Ç: –≤—Ä–µ–º—è}
        task_text = data['task']
        task_time = data['time']

        task_lines.append(f"{i + 1}. {task_text} ‚Äî {task_time}")

    result = "\n".join(task_lines)
    await message.answer(f"üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª:\n{result}")


@user.message(Command("clear"))
async def clear_tasks(message: Message):
    user_id = message.from_user.id

    if user_id not in tasks_list or not tasks_list[user_id]:
        await message.answer("üóíÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é /add.")
        return

    tasks_list[user_id].clear()
    await message.answer("‚úÖ –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω.")


@user.message(Command("done"))
async def done_task(message: Message):
    user_id = message.from_user.id

    if user_id not in tasks_list or not tasks_list[user_id]:
        await message.answer("üóíÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é /add.")
        return
    keyboard = build_task_keyboard(user_id)
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:", reply_markup=keyboard)


@user.callback_query(F.data.startswith('done_'))
async def done(callback: CallbackQuery):
    await callback.answer()

    task_index = int(callback.data.split('_')[1])  # –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    user_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–ø–∏—Å–∫–µ)
    tasks = tasks_list.get(user_id, [])
    if 0 < task_index <= len(tasks):
        tasks[task_index - 1] = f"{tasks[task_index - 1]}"
        tasks_list[user_id].pop(task_index - 1)

    # –°—Ç—Ä–æ–∏–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–æ–∫
    new_markup = build_task_keyboard(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=new_markup)
    await callback.message.answer(f"–ó–∞–¥–∞—á–∞ {task_index} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")


@user.message(Command("remind"))
async def set_reminder(message: Message):
    user_id = message.from_user.id

    if user_id not in tasks_list or not tasks_list[user_id]:
        await message.answer("üóíÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é /add.")
        return
    keyboard = build_reminder_keyboard(user_id)
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å:", reply_markup=keyboard)




@user.callback_query(F.data.startswith("remind_"))
async def remind(callback: CallbackQuery):
    await callback.answer()
    task_index = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    tasks = tasks_list.get(user_id, [])

    if 0 < task_index <= len(tasks):
        task_key = (user_id, task_index)

        if not tasks[task_index - 1]["is_remind"]:
            tasks[task_index - 1]["is_remind"] = True

            new_markup = build_reminder_keyboard(user_id)
            await callback.message.edit_reply_markup(reply_markup=new_markup)

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            with connect("reminder_tasks.db") as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "INSERT INTO reminders (task_id, remind_time, status) VALUES (?, ?, ?)",
                    (task_index, tasks[task_index - 1]['time'], 'pending')
                )
                conn.commit()

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
            reminder_task = asyncio.create_task(
                send_reminder(bot, user_id, tasks[task_index - 1]['task'], tasks[task_index - 1]['time'])
            )
            reminder_tasks[task_key] = reminder_task

            await callback.message.answer("‚è∞ –í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–∞–π–º–µ—Ä.")
        else:
            tasks[task_index - 1]["is_remind"] = False

            # ‚ùå –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
            reminder_task = reminder_tasks.get(task_key)
            if reminder_task and not reminder_task.done():
                reminder_task.cancel()
                del reminder_tasks[task_key]

            # ‚ùå –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            with connect("reminder_tasks.db") as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "DELETE FROM reminders WHERE task_id = ? AND status = 'pending'",
                    (task_index,)
                )
                conn.commit()

            new_markup = build_reminder_keyboard(user_id)
            await callback.message.edit_reply_markup(reply_markup=new_markup)
            await callback.message.answer("‚è∞ –í—ã —Å–Ω—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–∞.")
